---

---

<div class="space-y-6" id="student-info">
  <div class="glass-card p-6 rounded-xl">
    <h3 class="text-xl font-semibold text-white/90 mb-4 text-center">
      Información Personal
    </h3>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div>
        <h4 class="text-white/70 text-sm">Nombre Completo</h4>
        <p class="text-white/90" data-field="fullName"></p>
      </div>
      <div>
        <h4 class="text-white/70 text-sm">DNI</h4>
        <p class="text-white/90" data-field="dni"></p>
      </div>
      <div>
        <h4 class="text-white/70 text-sm">CUIL</h4>
        <p class="text-white/90" data-field="cuil"></p>
      </div>
      <div>
        <h4 class="text-white/70 text-sm">Fecha de Nacimiento</h4>
        <p class="text-white/90" data-field="birthDate"></p>
      </div>
      <div>
        <h4 class="text-white/70 text-sm">Dirección</h4>
        <p class="text-white/90" data-field="address"></p>
      </div>
      <div>
        <h4 class="text-white/70 text-sm">Teléfono</h4>
        <p class="text-white/90" data-field="phone"></p>
      </div>
    </div>
  </div>

  <div id="tutors-container" class="glass-card p-6 rounded-xl">
    <h3
      class="text-xl font-semibold text-white/90 mb-6 text-center"
      id="tutors-title"
    >
      Información de Tutores
    </h3>
    <div id="tutors-grid" class="grid grid-cols-1 gap-4">
      <div class="glass-card-inner p-6 rounded-xl">
        <div class="text-center text-white/70 py-4">
          Cargando información de tutores...
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  class StudentInfoManager {
    private studentInfo: HTMLDivElement;
    private tutorsGrid: HTMLDivElement;
    private tutorsTitle: HTMLHeadingElement;

    constructor() {
      this.studentInfo = document.getElementById(
        "student-info"
      ) as HTMLDivElement;
      this.tutorsGrid = document.getElementById(
        "tutors-grid"
      ) as HTMLDivElement;
      this.tutorsTitle = document.getElementById(
        "tutors-title"
      ) as HTMLHeadingElement;
      this.loadData();
    }

    private async loadData(): Promise<void> {
      const studentId = localStorage.getItem("selectedStudentId");
      if (!studentId) return;

      await Promise.all([
        this.loadStudentInfo(studentId),
        this.loadTutorInfo(studentId),
      ]);
    }

    private async loadStudentInfo(studentId: string): Promise<void> {
      try {
        const response = await fetch(`/api/student?id=${studentId}`);
        const data = await response.json();

        if (data && data.length > 0) {
          const student = data[0];
          this.displayStudentInfo(student);
        } else {
          this.displayError("No se encontró información del estudiante.");
        }
      } catch (error) {
        console.error("Error fetching student data:", error);
        this.displayError("Error al obtener información del estudiante.");
      }
    }

    private async loadTutorInfo(studentId: string): Promise<void> {
      try {
        const response = await fetch(`/api/tutor?id=${studentId}`);
        const data = await response.json();

        if (data && data.length > 0) {
          this.displayTutorInfo(data);
        } else {
          this.displayTutorError("No se encontró información de tutores.");
        }
      } catch (error) {
        console.error("Error fetching tutor data:", error);
        this.displayTutorError("Error al obtener información de tutores.");
      }
    }

    private displayStudentInfo(student: any): void {
      const fields = {
        fullName: `${student.Nombres} ${student.Apellidos}`,
        dni: student.Documento,
        cuil: student.Cuil,
        birthDate: student.FechaNacimiento,
        address: `${student.Calle} ${student.Numero}, ${student.Localidad}`,
        phone: student.Telefono || "No disponible",
      };

      Object.entries(fields).forEach(([field, value]) => {
        const element = this.studentInfo.querySelector(
          `[data-field="${field}"]`
        );
        if (element) element.textContent = value as string;
      });
    }

    private displayTutorInfo(tutors: any[]): void {
      const isSingleTutor = tutors.length === 1;
      this.tutorsTitle.textContent = isSingleTutor
        ? "Información del Tutor"
        : "Información de Tutores";
      this.tutorsGrid.className = `grid grid-cols-1 ${isSingleTutor ? "" : "md:grid-cols-2"} gap-4`;

      this.tutorsGrid.innerHTML = tutors
        .map(
          (tutor) => `
        <div class="glass-card-inner p-6 rounded-xl relative overflow-hidden">
          <div class="absolute top-0 right-0 px-3 py-1 rounded-bl-lg bg-gradient-to-r from-[#1a5188]/20 to-[#2d3d9e]/20 border-l border-b border-white/10">
            <span class="text-sm text-white/70">${tutor.Parentezco}</span>
          </div>
          <div class="space-y-4 mt-6">
            <div>
              <h4 class="text-white/70 text-sm">Nombre Completo</h4>
              <p class="text-white/90">${tutor.Nombres} ${tutor.Apellidos}</p>
            </div>
            <div>
              <h4 class="text-white/70 text-sm">DNI</h4>
              <p class="text-white/90">${tutor.Documento}</p>
            </div>
            <div>
              <h4 class="text-white/70 text-sm">Domicilio</h4>
              <p class="text-white/90">${tutor.Domicilio}</p>
            </div>
            <div class="grid grid-cols-2 gap-4">
              <div>
                <h4 class="text-white/70 text-sm">Teléfono</h4>
                <p class="text-white/90">${tutor.Telefono || "No disponible"}</p>
              </div>
              <div>
                <h4 class="text-white/70 text-sm">Celular</h4>
                <p class="text-white/90">${tutor.Celular || "No disponible"}</p>
              </div>
            </div>
          </div>
        </div>
      `
        )
        .join("");
    }

    private displayError(message: string): void {
      this.studentInfo.innerHTML = `
        <div class="text-red-400 p-4 text-center">${message}</div>
      `;
    }

    private displayTutorError(message: string): void {
      this.tutorsGrid.innerHTML = `
        <div class="glass-card-inner p-6 rounded-xl">
          <div class="text-red-400 p-4 text-center">${message}</div>
        </div>
      `;
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    new StudentInfoManager();
  });
</script>

<style>
  .glass-card {
    background: linear-gradient(
      145deg,
      rgba(37, 38, 39, 0.7),
      rgba(37, 38, 39, 0.4)
    );
    position: relative;
  }

  .glass-card::before {
    content: "";
    position: absolute;
    inset: 0;
    border-radius: inherit;
    padding: 1px;
    background: linear-gradient(
      145deg,
      rgba(240, 244, 239, 0.1),
      rgba(240, 244, 239, 0.05)
    );
    mask:
      linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    -webkit-mask:
      linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
    pointer-events: none;
  }

  .glass-card-inner {
    background: linear-gradient(
      145deg,
      rgba(26, 81, 136, 0.1),
      rgba(45, 61, 158, 0.1)
    );
    border: 1px solid rgba(255, 255, 255, 0.1);
    position: relative;
  }

  .glass-card-inner::before {
    content: "";
    position: absolute;
    inset: 0;
    border-radius: inherit;
    padding: 1px;
    background: linear-gradient(
      145deg,
      rgba(240, 244, 239, 0.05),
      rgba(240, 244, 239, 0.02)
    );
    mask:
      linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    -webkit-mask:
      linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
    pointer-events: none;
  }
</style>
