---
import { Icon } from "astro-icon/components";
---

<div class="space-y-6 animate-fade-in">
  <div id="attendance-info" class="grid grid-cols-1 md:grid-cols-2 gap-4">
    <!-- Stats cards will be inserted here -->
  </div>

  <div
    class="glass-card p-6 rounded-xl backdrop-blur-xl border border-white/10 animate-slide-up"
  >
    <div
      class="flex flex-col sm:flex-row sm:justify-between items-center gap-3 mb-6"
    >
      <h3
        class="text-lg font-semibold text-white/90 text-center flex items-center gap-2"
      >
        <Icon name="mdi:calendar-clock" class="w-5 h-5" />
        Inasistencias 2024
      </h3>
      <div class="flex flex-wrap justify-center gap-2">
        <span class="badge badge-success flex items-center gap-1">
          <Icon name="mdi:check-circle" class="w-4 h-4" />
          Justificada
        </span>
        <span class="badge badge-error flex items-center gap-1">
          <Icon name="mdi:alert-circle" class="w-4 h-4" />
          Sin Justificar
        </span>
      </div>
    </div>
    <div class="overflow-x-auto">
      <table class="table w-full" id="attendance-table">
        <thead>
          <tr>
            <th class="text-white/90 border-b border-white/10 py-3">Fecha</th>
            <th class="text-white/90 border-b border-white/10 py-3">Tipo</th>
            <th class="text-white/90 border-b border-white/10 py-3">Cant.</th>
            <th class="text-white/90 border-b border-white/10 py-3">Just.</th>
            <th
              class="text-white/90 border-b border-white/10 py-3 hidden sm:table-cell"
              >Escuela</th
            >
            <th
              class="text-white/90 border-b border-white/10 py-3 hidden sm:table-cell"
              >Justificación</th
            >
          </tr>
        </thead>
        <tbody id="attendance-body">
          <tr>
            <td colspan="6" class="text-center text-white/70 py-8">
              <div class="flex items-center justify-center gap-2">
                <Icon name="mdi:loading" class="w-5 h-5 animate-spin" />
                Cargando datos...
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>

<script>
  class AttendanceManager {
    private tableBody: HTMLElement;
    private infoDiv: HTMLElement;
    private currentYear: number;

    constructor() {
      this.tableBody = document.getElementById("attendance-body")!;
      this.infoDiv = document.getElementById("attendance-info")!;
      this.currentYear = new Date().getFullYear();
      this.loadAttendance();
    }

    private async loadAttendance(): Promise<void> {
      const studentId = localStorage.getItem("selectedStudentId");

      if (!studentId) {
        this.showError("No hay estudiante seleccionado");
        return;
      }

      try {
        const response = await fetch(`/api/faltas?id=${studentId}`);
        const data = await response.json();

        if (data && data.length > 0) {
          const currentYearData = data.filter(
            (r) => r.Año === this.currentYear.toString()
          );
          if (currentYearData.length > 0) {
            this.displayAttendance(currentYearData);
            this.displaySummary(currentYearData);
          } else {
            this.showError(
              "No hay registros de inasistencias para el año actual"
            );
          }
        } else {
          this.showError("No se encontraron registros de inasistencias");
        }
      } catch (error) {
        console.error("Error fetching attendance data:", error);
        this.showError("Error al obtener los datos de inasistencias");
      }
    }

    private displayAttendance(data: any[]): void {
      this.tableBody.innerHTML = data
        .sort(
          (a, b) => new Date(b.Fecha).getTime() - new Date(a.Fecha).getTime()
        )
        .map(
          (record, index) => `
            <tr class="border-b border-white/5 hover:bg-white/5 transition-all duration-300 sm:bg-transparent ${
              record.EstaJustificada === "S"
                ? "bg-green-500/5 hover:bg-green-500/10"
                : "bg-red-500/5 hover:bg-red-500/10"
            } animate-fade-slide-up" style="animation-delay: ${index * 50}ms">
              <td class="text-white/90 py-3">${record.Fecha}</td>
              <td class="text-white/90 py-3">${record.Tipo.trim()}</td>
              <td class="text-white/90 py-3">${record.Cantidad}</td>
              <td class="py-3">
                <span class="badge ${record.EstaJustificada === "S" ? "badge-success" : "badge-error"} gap-1 flex items-center">
                  <span class="hidden sm:inline">${record.EstaJustificada === "S" ? "Sí" : "No"}</span>
                  <span class="sm:hidden">
                    ${
                      record.EstaJustificada === "S"
                        ? '<span class="i-mdi-check-circle w-4 h-4"></span>'
                        : '<span class="i-mdi-alert-circle w-4 h-4"></span>'
                    }
                  </span>
                </span>
              </td>
              <td class="text-white/90 py-3 hidden sm:table-cell">${record.Escuela}</td>
              <td class="text-white/90 py-3 hidden sm:table-cell">${record.Justificación || "-"}</td>
            </tr>
          `
        )
        .join("");
    }

    private displaySummary(data: any[]): void {
      const currentYearTotal = this.calculateTotal(data);
      const justified = data.filter((r) => r.EstaJustificada === "S").length;

      this.infoDiv.innerHTML = `
          <div class="stat-card text-center animate-fade-slide-up">
            <div class="stat-icon">
              <span class="i-mdi-calendar-alert w-6 h-6"></span>
            </div>
            <div class="stat-title">Total</div>
            <div class="stat-value">${currentYearTotal.toFixed(2)}</div>
            <div class="stat-desc">Inasistencias</div>
          </div>
          <div class="stat-card text-center animate-fade-slide-up" style="animation-delay: 100ms">
            <div class="stat-icon">
              <span class="i-mdi-check-decagram w-6 h-6"></span>
            </div>
            <div class="stat-title">Justificadas</div>
            <div class="stat-value">${justified}</div>
            <div class="stat-desc">de ${data.length} faltas</div>
          </div>
        `;
    }

    private calculateTotal(data: any[]): number {
      return data.reduce((acc, curr) => {
        const cantidad =
          curr.Cantidad === "Media"
            ? 0.5
            : curr.Cantidad === "Cuarta"
              ? 0.25
              : parseFloat(curr.Cantidad) || 0;
        return acc + cantidad;
      }, 0);
    }

    private showError(message: string): void {
      this.tableBody.innerHTML = `
          <tr>
            <td colspan="6" class="text-center text-red-400 py-8">
              <div class="flex items-center justify-center gap-2">
                <span class="i-mdi-alert w-5 h-5"></span>
                ${message}
              </div>
            </td>
          </tr>
        `;
      this.infoDiv.innerHTML = "";
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    new AttendanceManager();
  });
</script>

<style>
  .glass-card {
    background: linear-gradient(
      145deg,
      rgba(37, 38, 39, 0.7),
      rgba(37, 38, 39, 0.4)
    );
    position: relative;
    transition:
      transform 0.3s ease,
      box-shadow 0.3s ease;
  }

  .glass-card:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 20px -2px rgba(0, 0, 0, 0.2);
  }

  .glass-card::before {
    content: "";
    position: absolute;
    inset: 0;
    border-radius: inherit;
    padding: 1px;
    background: linear-gradient(
      145deg,
      rgba(240, 244, 239, 0.1),
      rgba(240, 244, 239, 0.05)
    );
    mask:
      linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    -webkit-mask:
      linear-gradient(#fff 0 0) content-box,
      linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
    pointer-events: none;
  }

  .stat-card {
    @apply p-6 rounded-xl backdrop-blur-xl relative overflow-hidden;
    background: linear-gradient(
      145deg,
      rgba(26, 81, 136, 0.1),
      rgba(45, 61, 158, 0.1)
    );
    border: 1px solid rgba(255, 255, 255, 0.1);
    transition:
      transform 0.3s ease,
      box-shadow 0.3s ease;
  }

  .stat-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 20px -2px rgba(0, 0, 0, 0.2);
  }

  .stat-icon {
    @apply mb-3 text-white/70;
  }

  .stat-title {
    @apply text-white/70 text-sm mb-2;
  }

  .stat-value {
    @apply text-white text-3xl font-bold mb-1;
  }

  .stat-desc {
    @apply text-white/50 text-sm;
  }

  .badge {
    @apply px-3 py-1 rounded-md text-sm font-medium transition-all duration-200;
  }

  .badge-success {
    background: linear-gradient(
      145deg,
      rgba(34, 197, 94, 0.2),
      rgba(34, 197, 94, 0.1)
    );
    @apply text-green-300 border border-green-500/20;
  }

  .badge-error {
    background: linear-gradient(
      145deg,
      rgba(239, 68, 68, 0.2),
      rgba(239, 68, 68, 0.1)
    );
    @apply text-red-300 border border-red-500/20;
  }

  table {
    border-collapse: separate;
    border-spacing: 0;
  }

  th {
    @apply font-semibold text-sm;
  }

  td,
  th {
    @apply px-4;
  }

  tr:last-child td {
    border-bottom: none;
  }

  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes slide-up {
    from {
      transform: translateY(10px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes fade-slide-up {
    from {
      transform: translateY(10px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  .animate-fade-in {
    animation: fade-in 0.3s ease-out forwards;
  }

  .animate-slide-up {
    animation: slide-up 0.3s ease-out forwards;
  }

  .animate-fade-slide-up {
    opacity: 0;
    animation: fade-slide-up 0.3s ease-out forwards;
  }
</style>
