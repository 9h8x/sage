---
import { Icon } from "astro-icon/components";
---

<div class="space-y-6">
  <div id="attendance-info" class="grid grid-cols-1 md:grid-cols-2 gap-4">
    <!-- Stats cards will be inserted here -->
  </div>

  <div class="surface-2 p-6 rounded-lg">
    <div
      class="flex flex-col sm:flex-row sm:justify-between items-center gap-3 mb-6"
    >
      <h3 class="text-lg font-semibold text-white/90 flex items-center gap-2">
        <Icon name="mdi:calendar-clock" class="w-5 h-5" />
        Inasistencias 2024
      </h3>
      <div class="flex flex-wrap justify-center gap-2">
        <span class="badge badge-success flex items-center gap-1">
          <Icon name="mdi:check-circle" class="w-4 h-4" />
          Justificada
        </span>
        <span class="badge badge-error flex items-center gap-1">
          <Icon name="mdi:alert-circle" class="w-4 h-4" />
          Sin Justificar
        </span>
      </div>
    </div>

    <div class="overflow-x-auto">
      <table class="w-full" id="attendance-table">
        <thead>
          <tr class="border-b border-white/10">
            <th class="text-left text-white/90 py-3 px-4">Fecha</th>
            <th class="text-left text-white/90 py-3 px-4">Tipo</th>
            <th class="text-left text-white/90 py-3 px-4">Cant.</th>
            <th class="text-left text-white/90 py-3 px-4 hidden sm:table-cell"
              >Estado</th
            >
            <th class="text-left text-white/90 py-3 px-4 hidden sm:table-cell"
              >Escuela</th
            >
            <th class="text-left text-white/90 py-3 px-4 hidden sm:table-cell"
              >Justificaci칩n</th
            >
          </tr>
        </thead>
        <tbody id="attendance-body">
          <tr>
            <td colspan="6" class="text-center text-white/70 py-8">
              <div class="flex items-center justify-center gap-2">
                <Icon name="mdi:loading" class="w-5 h-5 animate-spin" />
                Cargando datos...
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>

<script>
  class AttendanceManager {
    private tableBody: HTMLElement;
    private infoDiv: HTMLElement;
    private currentYear: number;

    constructor() {
      this.tableBody = document.getElementById("attendance-body")!;
      this.infoDiv = document.getElementById("attendance-info")!;
      this.currentYear = new Date().getFullYear();
      this.loadAttendance();
    }

    private async loadAttendance(): Promise<void> {
      const studentId = localStorage.getItem("selectedStudentId");

      if (!studentId) {
        this.showError("No hay estudiante seleccionado");
        return;
      }

      try {
        const response = await fetch(`/api/faltas?id=${studentId}`);
        const data = await response.json();

        if (data && data.length > 0) {
          const currentYearData = data.filter(
            (r) => r.A침o === this.currentYear.toString()
          );
          if (currentYearData.length > 0) {
            this.displayAttendance(currentYearData);
            this.displaySummary(currentYearData);
          } else {
            this.showError(
              "No hay registros de inasistencias para el a침o actual"
            );
          }
        } else {
          this.showError("No se encontraron registros de inasistencias");
        }
      } catch (error) {
        console.error("Error fetching attendance data:", error);
        this.showError("Error al obtener los datos de inasistencias");
      }
    }

    private displayAttendance(data: any[]): void {
      this.tableBody.innerHTML = data
        .sort(
          (a, b) => new Date(b.Fecha).getTime() - new Date(a.Fecha).getTime()
        )
        .map(
          (record) => `
            <tr class="${
              record.EstaJustificada === "S" ? "bg-green-500/5" : "bg-red-500/5"
            } sm:bg-transparent border-t border-white/10">
              <td class="text-white/90 py-3 px-4">${record.Fecha}</td>
              <td class="text-white/90 py-3 px-4">${record.Tipo.trim()}</td>
              <td class="text-white/90 py-3 px-4">${record.Cantidad}</td>
              <td class="py-3 px-4 hidden sm:table-cell">
                <div class="inline-flex items-center gap-1 text-sm ${
                  record.EstaJustificada === "S"
                    ? "text-green-300"
                    : "text-red-300"
                }">
                  ${record.EstaJustificada === "S" ? "Justificada" : "Sin Justificar"}
                </div>
              </td>
              <td class="text-white/90 py-3 px-4 hidden sm:table-cell">${
                record.Escuela
              }</td>
              <td class="text-white/90 py-3 px-4 hidden sm:table-cell">${
                record.Justificaci칩n || "-"
              }</td>
            </tr>
          `
        )
        .join("");
    }

    private displaySummary(data: any[]): void {
      const currentYearTotal = this.calculateTotal(data);
      const justified = data.filter((r) => r.EstaJustificada === "S").length;

      this.infoDiv.innerHTML = `
        <div class="surface-3 p-6 rounded-lg text-center">
          <div class="flex justify-center mb-2">
            <Icon name="mdi:calendar-alert" class="w-6 h-6 text-white/70" />
          </div>
          <div class="text-sm text-white/70 mb-1">Total</div>
          <div class="text-2xl font-bold text-white mb-1">${currentYearTotal.toFixed(
            2
          )}</div>
          <div class="text-sm text-white/50">Inasistencias</div>
        </div>
        <div class="surface-3 p-6 rounded-lg text-center">
          <div class="flex justify-center mb-2">
            <Icon name="mdi:check-decagram" class="w-6 h-6 text-white/70" />
          </div>
          <div class="text-sm text-white/70 mb-1">Justificadas</div>
          <div class="text-2xl font-bold text-white mb-1">${justified}</div>
          <div class="text-sm text-white/50">de ${data.length} faltas</div>
        </div>
      `;
    }

    private calculateTotal(data: any[]): number {
      return data.reduce((acc, curr) => {
        const cantidad =
          curr.Cantidad === "Media"
            ? 0.5
            : curr.Cantidad === "Cuarta"
              ? 0.25
              : parseFloat(curr.Cantidad) || 0;
        return acc + cantidad;
      }, 0);
    }

    private showError(message: string): void {
      this.tableBody.innerHTML = `
        <tr>
          <td colspan="6" class="text-center text-red-400 py-8">
            <div class="flex items-center justify-center gap-2">
              <Icon name="mdi:alert" class="w-5 h-5" />
              ${message}
            </div>
          </td>
        </tr>
      `;
      this.infoDiv.innerHTML = "";
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    new AttendanceManager();
  });
</script>

<style>
  .badge {
    @apply px-3 py-1 rounded-full text-sm font-medium;
  }

  .badge-success {
    @apply bg-green-500/20 text-green-300;
  }

  .badge-error {
    @apply bg-red-500/20 text-red-300;
  }
</style>
