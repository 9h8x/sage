---
import Layout from "../../layouts/Layout.astro";
import Navbar from "../../components/Navbar.astro";
import DashboardTabs from "../../components/DashboardTabs.astro";
import SearchBar from "../../components/SearchBar.astro";

const tabs = [
  { name: "Estudiante", href: "/dashboard", active: true },
  { name: "Información", href: "/dashboard/student", active: false },
  { name: "Inasistencias", href: "/dashboard/attendance", active: false },
];
---

<Layout title="Panel SAGE - Dashboard">
  <Navbar />
  <main class="pt-16">
    <DashboardTabs tabs={tabs} />

    <div class="py-8">
      <div class="max-w-7xl mx-auto px-4">
        <div id="current-student" class="hidden mb-8">
          <div class="text-center">
            <h2 class="text-xl text-white/90 mb-4">
              Viendo información de: <span
                id="student-name"
                class="font-semibold"></span>
            </h2>
            <button
              id="change-student"
              class="btn btn-ghost px-4 py-2 rounded-md outline outline-1"
            >
              Cambiar de estudiante
            </button>
          </div>
        </div>

        <div id="search-container" class="text-center">
          <h2 class="text-2xl font-bold text-white/90 mb-8">Buscador SAGE</h2>
          <SearchBar />
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  class DashboardManager {
    private searchContainer: HTMLDivElement;
    private currentStudent: HTMLDivElement;
    private studentName: HTMLSpanElement;
    private changeButton: HTMLButtonElement;
    private searchInput: HTMLInputElement;
    private loadingContainer: HTMLDivElement;
    private resultsContainer: HTMLDivElement;
    private timeout: NodeJS.Timeout | null = null;

    constructor() {
      this.initializeElements();
      this.setupEventListeners();
      this.checkCurrentStudent();
    }

    private initializeElements(): void {
      this.searchContainer = document.querySelector(
        "#search-container"
      ) as HTMLDivElement;
      this.currentStudent = document.querySelector(
        "#current-student"
      ) as HTMLDivElement;
      this.studentName = document.querySelector(
        "#student-name"
      ) as HTMLSpanElement;
      this.changeButton = document.querySelector(
        "#change-student"
      ) as HTMLButtonElement;
      this.searchInput = document.querySelector(
        "#search-input"
      ) as HTMLInputElement;
      this.loadingContainer = document.querySelector(
        "#loading-container"
      ) as HTMLDivElement;
      this.resultsContainer = document.querySelector(
        "#results-container"
      ) as HTMLDivElement;
    }

    private setupEventListeners(): void {
      this.searchInput?.addEventListener("input", (e) => this.handleSearch(e));
      this.resultsContainer?.addEventListener("click", (e) =>
        this.handleResultClick(e)
      );
      this.changeButton?.addEventListener("click", () => this.showSearch());
    }

    private checkCurrentStudent(): void {
      const studentId = localStorage.getItem("selectedStudentId");
      const studentName = localStorage.getItem("selectedStudentName");

      if (studentId && studentName) {
        this.showCurrentStudent(studentName);
      } else {
        this.showSearch();
      }
      this.updateTabsVisibility(!!studentId);
    }

    private showCurrentStudent(name: string): void {
      this.currentStudent.classList.remove("hidden");
      this.searchContainer.classList.add("hidden");
      this.studentName.textContent = name;
    }

    private showSearch(): void {
      this.currentStudent.classList.add("hidden");
      this.searchContainer.classList.remove("hidden");
      this.searchInput.value = "";
      this.resultsContainer.innerHTML = "";
      localStorage.removeItem("selectedStudentId");
      localStorage.removeItem("selectedStudentName");
      this.updateTabsVisibility(false);
    }

    private updateTabsVisibility(hasStudent: boolean): void {
      const studentInfoTab = document.querySelector(
        'a[href="/dashboard/student"]'
      )?.parentElement;
      const attendanceTab = document.querySelector(
        'a[href="/dashboard/attendance"]'
      )?.parentElement;

      if (studentInfoTab) {
        studentInfoTab.style.display = hasStudent ? "" : "none";
      }
      if (attendanceTab) {
        attendanceTab.style.display = hasStudent ? "" : "none";
      }
    }

    private handleSearch(e: Event): void {
      const input = e.target as HTMLInputElement;
      if (this.timeout) clearTimeout(this.timeout);

      if (input.value.length < 3) {
        this.loadingContainer.style.opacity = "0";
        this.resultsContainer.innerHTML = "";
        return;
      }

      this.loadingContainer.style.opacity = "1";
      this.timeout = setTimeout(() => this.performSearch(input.value), 300);
    }

    private async performSearch(searchValue: string): Promise<void> {
      try {
        const response = await fetch(
          `https://sageapi2.jns.net.ar/api/search?search_value=${searchValue}`
        );
        const data = await response.json();

        setTimeout(() => {
          this.loadingContainer.style.opacity = "0";
        }, 200);

        this.resultsContainer.innerHTML = data.results
          .map(
            (result: any) => `
            <button
              class="w-full text-left p-4 mb-2 surface-2 rounded-lg hover:surface-3 transition-colors duration-200"
              data-student-id="${result.id}"
              data-student-name="${result.name}"
            >
              <div class="flex justify-between items-center">
                <span class="text-white/90">${result.name}</span>
                <span class="text-white/70">${result.id}</span>
              </div>
            </button>
          `
          )
          .join("");
      } catch (error) {
        console.error("Error fetching data:", error);
        this.loadingContainer.style.opacity = "0";
        this.resultsContainer.innerHTML =
          '<div class="text-red-500 p-4">Error al buscar. Por favor, intente nuevamente.</div>';
      }
    }

    private handleResultClick(e: Event): void {
      const button = (e.target as HTMLElement).closest("button");
      if (!button) return;

      const studentId = button.dataset.studentId;
      const studentName = button.dataset.studentName;
      if (!studentId || !studentName) return;

      localStorage.setItem("selectedStudentId", studentId);
      localStorage.setItem("selectedStudentName", studentName);

      button.classList.add("surface-4");
      setTimeout(() => {
        this.showCurrentStudent(studentName);
        this.updateTabsVisibility(true);
      }, 200);
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    new DashboardManager();
  });
</script>
